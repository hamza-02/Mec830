#define ENCODER_OPTIMIZE_INTERRUPTS

#include <AccelStepper.h>
#include <PID_v1.h>
#include <Encoder.h>

// Pin Definitions
const int dirPin = 9;         // Direction pin for the stepper motor
const int pulsePin = 8;       // Pulse pin for the stepper motor
const int encoderPinA = 2;    // Encoder pin A
const int encoderPinB = 3;    // Encoder pin B

// Stepper Motor and Driver Settings
const bool inverted = true;
const int stepMode = 0;
const int stepModes[6][5] = {
  {5, 1, 0, 0, 0},
  {10, 2, 1, 0, 0},
  {20, 4, 0, 1, 0},
  {40, 8, 1, 1, 0},
  {80, 16, 0, 0, 1},
  {160, 32, 1, 1, 1}
};
double stepsPerMM;
int outputDir;
AccelStepper stepper(AccelStepper::DRIVER, pulsePin, dirPin);

// PID Control Variables
double setPoint, input, output, scaleFactor;
double kp, ki, kd;
PID pid(&input, &output, &setPoint, kp, ki, kd, DIRECT);

// Encoder Setup
Encoder encoder(encoderPinA, encoderPinB);

void setup() {
  Serial.begin(9600);

  // Set PID parameters based on inversion status
  if (inverted) {
    outputDir = 1;
    kp = 100.00;
    ki = 10500.00;
    kd = 0.00;
    scaleFactor = -1 / 37.5;
  } else {
    outputDir = -1;
    kp = 250.00;
    ki = 0.00;
    kd = 5.00;
    scaleFactor = -1 / 100;
  }

  pid.SetTunings(kp, ki, kd);
  pid.SetMode(AUTOMATIC);
  pid.SetOutputLimits(-1250, 1250);
  stepper.setAcceleration(300);  // Experiment with values between 200 and 1000


  // Stepper Motor Configuration
  stepsPerMM = stepModes[stepMode][0];
  stepper.setMaxSpeed(1500);       // Set a reasonable max speed
  stepper.setMinPulseWidth(20);
  

  // Configure microstepping pins
  pinMode(6, OUTPUT);
  pinMode(7, OUTPUT);
  pinMode(8, OUTPUT);
  digitalWrite(6, stepModes[stepMode][2]);
  digitalWrite(7, stepModes[stepMode][3]);
  digitalWrite(8, stepModes[stepMode][4]);

  // Initialize the encoder and set the initial setpoint
  setPoint = 0;
  encoder.write(0);

  // Wait for the encoder to reach zero position
  while (encoder.read() < 0) {
    // NOOP
  }
}

void loop() {
  // Main PID control loop for stepper movement
  int count = encoder.read();
  double angle = count * (360.0 / 2000.0); // Convert encoder count to angle
  input = scaleFactor * stepper.currentPosition() / stepsPerMM + 200 * sin(angle * (PI / 180));

  pid.Compute();

  // Set motor speed and direction based on PID output
  stepper.setSpeed(outputDir * output);
  stepper.runSpeed();

  // Debug output for monitoring
  Serial.print("Encoder Count: ");
  Serial.print(count);
  Serial.print(" | Angle: ");
  Serial.print(angle);
  Serial.print(" degrees | Setpoint: ");
  Serial.print(setPoint);
  Serial.print(" | PID Output (Speed Command): ");
  Serial.print(output);
  Serial.print(" | Current Motor Speed: ");
  Serial.println(stepper.speed());

  delay(100); // Adjust delay for stability as needed
}
